#!/usr/bin/env perl

use Modern::Perl;
use Getopt::Long;
use Pod::Usage;
require IO::File;
require Text::CSV;
require WWW::Mechanize;
require URI::_foreign;

my $main = __PACKAGE__;

my ($opml_output_path, $help, $man, $min_likes, $debug) = ('')x5;
GetOptions(
    "min-likes=i" => \$min_likes,
    "output=s" => \$opml_output_path,
    "help|?" => \$help,
    "debug" => \$debug,
    man => \$man,
) || pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $csv_path = shift @ARGV;
unless ($csv_path) {
    say("ERROR: Missing path to CSV file.");
    exit 255;
}

if (@ARGV) {
    say("ERROR: Unexpected arguments: ", join(' ', @ARGV));
    exit 255;
}

my @discovered_feeds = $main->load_instapaper_csv($csv_path);

if ($opml_output_path) {
    $main->export_opml(@discovered_feeds);
}

sub load_instapaper_csv {
    my $class = shift;
    my $file_path = shift;

    my $mech = WWW::Mechanize->new();
    my $csv = Text::CSV->new({binary => 1});

    my $discovered_feeds = {};
    my $file = IO::File->new($file_path, 'r');
    while (my $row = $csv->getline($file)) {
        my ($url, $title, $selection, $folder) = @$row;

        next unless $folder eq 'Starred';

        eval { $mech->get($url) };
        if (my $error = $@) {
            say(STDERR "Exception during get ($url): $error") if $debug;
            next;
        }

        my $discovered_feed = eval { $class->auto_discover_feed($mech) };
        if (my $error = $@) {
            say(STDERR "Exception during auto_discover_feed ($url): $error") if $debug;
            next;
        }
        if ($discovered_feed) {
            $discovered_feeds->{$class->abs_url($discovered_feed)}{count}++;
            $discovered_feeds->{$class->abs_url($discovered_feed)}{feed} = $discovered_feed;
        }
    }

    my @discovered_feeds;
    for my $feed_url (keys %$discovered_feeds) {
        say($discovered_feeds->{$feed_url}{count} . ' ' . $feed_url) if $debug;
        if (!$min_likes || $discovered_feeds->{$feed_url}{count} >= $min_likes) {
            push @discovered_feeds, $discovered_feeds->{$feed_url}{feed};
        }
    }
    return @discovered_feeds;
}

sub url_host {
    my $class = shift;
    my $mech = shift;
    my $url_host = $mech->uri->host;
    $url_host =~ s/^www\.//;
    return $url_host;
}

sub auto_discover_feed {
    my $class = shift;
    my $mech = shift;

    my $url = $mech->uri;
    my $url_host = $class->url_host($mech);
    my @feeds = $class->feeds($mech);

    unless (@feeds) {
        say(STDERR "Unable to find preferred feed for ($url): no feeds found.") if $debug;
        return;
    }

    if (@feeds == 1) {
        return shift @feeds;
    }

    my @feedburner_feeds = grep { $_->URI->abs->host =~ /feeds\d*\.feedburner\.com/ } @feeds;
    if (@feedburner_feeds == 1) {
        return shift @feedburner_feeds;
    } elsif (@feedburner_feeds) {
        say(STDERR "Unable to find preferred feed for ($url): multiple FeedBurner feeds found:\n\t" . join("\n\t", map { $class->abs_url($_) } @feedburner_feeds)) if $debug;
        return;
    }

    my @url_host_feeds = grep { $_->URI->abs->host =~ /$url_host/ } @feeds;
    if (@url_host_feeds) {
        @url_host_feeds = sort { length($class->abs_url($a)) <=> length($class->abs_url($b)) } @url_host_feeds;
        return shift @url_host_feeds;
    }

    say(STDERR "Unable to find preferred feed for ($url): no FeedBurner or $url_host feeds found:\n\t" . join("\n\t", map { $class->abs_url($_) } @feeds)) if $debug;
    return;
}

sub abs_url {
    my $class = shift;
    my $link = shift;
    return $link->URI->abs->as_string;
}

sub feeds {
    my $class = shift;
    my $mech = shift;

    my @links = $mech->links();
    my @feeds = grep {
        exists $_->attrs->{type}
        && exists $_->attrs->{rel}
        && $_->attrs->{type} eq 'application/rss+xml'
        && $_->attrs->{rel}  eq 'alternate'
    } @links;

    my %seen = ();
    @feeds = grep { ! $seen{$class->abs_url($_)} ++ } @feeds;

    return @feeds;
}

sub export_opml {
    my $class = shift;
    my @feeds = @_;

    require XML::OPML::SimpleGen;
    my $opml = XML::OPML::SimpleGen->new();

    $opml->head(
        title => 'Instapaper Feeds',
    );
    $opml->outline({
        type => 'rss',
        xmlUrl => '',
    });

    for my $feed (@feeds) {
        $opml->insert_outline(
            group  => 'Instapaper Feeds',
            type   => 'rss',
            xmlUrl => $class->abs_url($feed),
        );
    }

    $opml->save($opml_output_path);
}

__END__

=head1 NAME

instapaper-feed-suggester

=head1 SYNOPSIS

instapaper-feed-suggester [options] [file ...]

=head1 OPTIONS

=over 8

=item --min-likes

Minimum number of liked articles per feed to be included in suggested feeds.

=item --output

Create OPML output using argument as path.

=item --debug

Show debugging output to see which articles were unable to auto-discover a feed (and why) 

=item --help

Print a brief help message and exits.

=item --man

Prints the manual page and exits.

=back

=head1 DESCRIPTION

Parses liked articles from an Instapaper CSV export and tries to determine
the feed for that article.

=cut
